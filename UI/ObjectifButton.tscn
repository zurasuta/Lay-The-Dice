[gd_scene load_steps=14 format=2]

[ext_resource path="res://ObjectifButton.gd" type="Script" id=1]
[ext_resource path="res://UI/MenuButton.tscn" type="PackedScene" id=2]
[ext_resource path="res://assets/monogram-extended.ttf" type="DynamicFontData" id=3]
[ext_resource path="res://assets/Mocha Assets/Buttons/grey-big-p.png" type="Texture" id=4]
[ext_resource path="res://assets/Mocha Assets/Buttons/grey-big.png" type="Texture" id=5]
[ext_resource path="res://UI/ObjectiveDisplay.tscn" type="PackedScene" id=6]
[ext_resource path="res://UI/AmountDisplay.tscn" type="PackedScene" id=7]

[sub_resource type="Shader" id=18]
code = "shader_type canvas_item;

uniform bool active = false;
uniform vec4 color : hint_color = vec4(1.0);
uniform float width : hint_range(0, 10) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = false;
uniform bool add_margins = true; // only useful when inside is false

void vertex() {
	if (add_margins) {
		VERTEX += (UV * 2.0 - 1.0) * width;
	}
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	vec4 previous_color = texture(TEXTURE, UV);
	vec2 uv = UV;
	
	if (active == true){
		if (add_margins) {
			vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
			
			uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
			
			if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
				COLOR.a = 0.0;
			} else {
				COLOR = texture(TEXTURE, uv);
			}
		} else {
			COLOR = texture(TEXTURE, uv);
		}
		
		if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
			COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
			COLOR.a += (1.0 - COLOR.a) * color.a;
		}
	} else {
		COLOR = previous_color
	}
}"

[sub_resource type="ShaderMaterial" id=19]
shader = SubResource( 18 )
shader_param/active = false
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/width = 10.0
shader_param/pattern = 0
shader_param/inside = false
shader_param/add_margins = true

[sub_resource type="RectangleShape2D" id=21]
extents = Vector2( 202, 295.5 )

[sub_resource type="DynamicFont" id=1]
size = 50
font_data = ExtResource( 3 )

[sub_resource type="Theme" id=22]
default_font = SubResource( 1 )

[sub_resource type="DynamicFont" id=23]
size = 60
outline_size = 1
outline_color = Color( 0, 0, 0, 1 )
extra_spacing_char = 3
font_data = ExtResource( 3 )

[node name="ObjectifButton" instance=ExtResource( 2 )]
script = ExtResource( 1 )
button_type = 5

[node name="ButtonPressed" parent="." index="0"]
visible = false
texture = ExtResource( 4 )

[node name="ButtonDefault" parent="." index="1"]
material = SubResource( 19 )
scale = Vector2( 0.975, 0.975129 )
texture = ExtResource( 5 )

[node name="CollisionShape2D" parent="." index="2"]
position = Vector2( 0, 3.5 )
shape = SubResource( 21 )

[node name="Label" parent="." index="3"]
margin_left = -101.0
margin_top = -257.0
margin_right = 104.0
margin_bottom = -207.0
theme = SubResource( 22 )
custom_colors/font_color = Color( 0, 0, 0, 1 )
custom_fonts/font = SubResource( 23 )
text = "text"
uppercase = false

[node name="ObjectiveDisplay" parent="Label" index="0" instance=ExtResource( 6 )]
position = Vector2( 108, 162 )

[node name="ObjectiveDisplay2" parent="Label" index="1" instance=ExtResource( 6 )]
position = Vector2( 111, 254 )

[node name="ObjectiveDisplay3" parent="Label" index="2" instance=ExtResource( 6 )]
position = Vector2( 112, 346 )

[node name="AmountDisplay" parent="Label" index="3" instance=ExtResource( 7 )]
position = Vector2( 222, 470 )
