[gd_scene load_steps=25 format=2]

[ext_resource path="res://DiceCharacters/DiceCharacter.tscn" type="PackedScene" id=1]
[ext_resource path="res://World.gd" type="Script" id=2]
[ext_resource path="res://assets/background_p1.png" type="Texture" id=3]
[ext_resource path="res://Player/Goal.tscn" type="PackedScene" id=4]
[ext_resource path="res://assets/Mocha Assets/UI/Table.PNG" type="Texture" id=5]
[ext_resource path="res://assets/Mocha Assets/Buttons/Orange.PNG" type="Texture" id=6]
[ext_resource path="res://assets/Mocha Assets/Buttons/Yoo.PNG" type="Texture" id=7]
[ext_resource path="res://UI/dice_theme.tres" type="Theme" id=8]
[ext_resource path="res://assets/Mocha Assets/Buttons/Blue.PNG" type="Texture" id=9]
[ext_resource path="res://assets/Mocha Assets/Buttons/Yippee.PNG" type="Texture" id=10]
[ext_resource path="res://assets/Mocha Assets/Buttons/Pink.PNG" type="Texture" id=11]
[ext_resource path="res://UI/CustomOutlineButton.tscn" type="PackedScene" id=12]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform bool active = false;
uniform vec4 color : hint_color = vec4(1.0);
uniform float width : hint_range(0, 10) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = false;
uniform bool add_margins = true; // only useful when inside is false

void vertex() {
	if (add_margins) {
		VERTEX += (UV * 2.0 - 1.0) * width;
	}
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	vec4 previous_color = texture(TEXTURE, UV);
	vec2 uv = UV;
	
	if (active == true){
		if (add_margins) {
			vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
			
			uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
			
			if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
				COLOR.a = 0.0;
			} else {
				COLOR = texture(TEXTURE, uv);
			}
		} else {
			COLOR = texture(TEXTURE, uv);
		}
		
		if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
			COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
			COLOR.a += (1.0 - COLOR.a) * color.a;
		}
	} else {
		COLOR = previous_color
	}
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 1 )
shader_param/active = false
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/width = 10.0
shader_param/pattern = 0
shader_param/inside = false
shader_param/add_margins = true

[sub_resource type="RectangleShape2D" id=8]
extents = Vector2( 152, 75.5 )

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 1 )
shader_param/active = false
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/width = 10.0
shader_param/pattern = 0
shader_param/inside = false
shader_param/add_margins = true

[sub_resource type="RectangleShape2D" id=2]
extents = Vector2( 148, 75.5 )

[sub_resource type="ShaderMaterial" id=11]
shader = SubResource( 1 )
shader_param/active = false
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/width = 10.0
shader_param/pattern = 0
shader_param/inside = false
shader_param/add_margins = true

[sub_resource type="RectangleShape2D" id=3]
extents = Vector2( 257, 78 )

[sub_resource type="Shader" id=18]
code = "shader_type canvas_item;

uniform bool active = false;
uniform vec4 color : hint_color = vec4(1.0);
uniform float width : hint_range(0, 10) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = false;
uniform bool add_margins = true; // only useful when inside is false

void vertex() {
	if (add_margins) {
		VERTEX += (UV * 2.0 - 1.0) * width;
	}
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	vec4 previous_color = texture(TEXTURE, UV);
	vec2 uv = UV;
	
	if (active == true){
		if (add_margins) {
			vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
			
			uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
			
			if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
				COLOR.a = 0.0;
			} else {
				COLOR = texture(TEXTURE, uv);
			}
		} else {
			COLOR = texture(TEXTURE, uv);
		}
		
		if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
			COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
			COLOR.a += (1.0 - COLOR.a) * color.a;
		}
	} else {
		COLOR = previous_color
	}
}"

[sub_resource type="ShaderMaterial" id=19]
shader = SubResource( 18 )
shader_param/active = false
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/width = 10.0
shader_param/pattern = 0
shader_param/inside = false
shader_param/add_margins = true

[sub_resource type="RectangleShape2D" id=20]
extents = Vector2( 41, 31.5 )

[sub_resource type="ShaderMaterial" id=16]
shader = SubResource( 1 )
shader_param/active = false
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/width = 10.0
shader_param/pattern = 0
shader_param/inside = false
shader_param/add_margins = true

[sub_resource type="RectangleShape2D" id=21]
extents = Vector2( 38.5, 29 )

[node name="World" type="Node2D"]
script = ExtResource( 2 )

[node name="Background" type="Sprite" parent="."]
scale = Vector2( 2.8, 2.8 )
texture = ExtResource( 3 )
centered = false
__meta__ = {
"_edit_lock_": true
}

[node name="Timer" type="Timer" parent="."]
wait_time = 10.5
one_shot = true
autostart = true

[node name="KeyPositions" type="Node2D" parent="."]
__meta__ = {
"_edit_group_": true,
"_edit_lock_": true
}

[node name="StartPosition" type="Position2D" parent="KeyPositions"]
position = Vector2( 2352, 610.4 )

[node name="CenterPosition" type="Position2D" parent="KeyPositions"]
position = Vector2( 896, 518 )

[node name="EndPosition" type="Position2D" parent="KeyPositions"]
position = Vector2( -644, 610.4 )
__meta__ = {
"_editor_description_": ""
}

[node name="Dices" type="Node2D" parent="."]

[node name="CurrentDice" parent="Dices" instance=ExtResource( 1 )]
position = Vector2( 904, 521 )

[node name="Buttons" type="Sprite" parent="."]
position = Vector2( 883, 902 )
texture = ExtResource( 5 )

[node name="TalkButton" parent="Buttons" instance=ExtResource( 12 )]
position = Vector2( -418, 6 )

[node name="Sprite" parent="Buttons/TalkButton" index="0"]
material = SubResource( 6 )
texture = ExtResource( 9 )

[node name="CollisionShape2D" parent="Buttons/TalkButton" index="1"]
position = Vector2( -1, -1.5 )
shape = SubResource( 8 )

[node name="TopicSlot" parent="Buttons/TalkButton" index="2"]
visible = false

[node name="FlirtButton" parent="Buttons" instance=ExtResource( 12 )]
position = Vector2( -83, 7 )
button_type = 1

[node name="Sprite" parent="Buttons/FlirtButton" index="0"]
material = SubResource( 9 )
texture = ExtResource( 11 )

[node name="CollisionShape2D" parent="Buttons/FlirtButton" index="1"]
position = Vector2( 2, 0.5 )
shape = SubResource( 2 )

[node name="TopicSlot" parent="Buttons/FlirtButton" index="2"]
visible = false

[node name="MentionButton" parent="Buttons" instance=ExtResource( 12 )]
position = Vector2( 360, 6 )
button_type = 2

[node name="Sprite" parent="Buttons/MentionButton" index="0"]
material = SubResource( 11 )
texture = ExtResource( 6 )

[node name="CollisionShape2D" parent="Buttons/MentionButton" index="1"]
position = Vector2( 1, 0 )
shape = SubResource( 3 )

[node name="TopicSlot" parent="Buttons/MentionButton" index="2"]
position = Vector2( 59, -4 )

[node name="Label" parent="Buttons/MentionButton" index="3"]
margin_left = -207.0
margin_right = -14.0

[node name="SmileyButton" parent="Buttons" instance=ExtResource( 12 )]
position = Vector2( 703, -36 )
button_type = 3

[node name="Sprite" parent="Buttons/SmileyButton" index="0"]
material = SubResource( 19 )
texture = ExtResource( 10 )

[node name="CollisionShape2D" parent="Buttons/SmileyButton" index="1"]
position = Vector2( 1, -0.5 )
shape = SubResource( 20 )

[node name="Label" parent="Buttons/SmileyButton" index="3"]
visible = false

[node name="SadFaceButton" parent="Buttons" instance=ExtResource( 12 )]
position = Vector2( 828, 37 )
button_type = 4

[node name="Sprite" parent="Buttons/SadFaceButton" index="0"]
material = SubResource( 16 )
texture = ExtResource( 7 )

[node name="CollisionShape2D" parent="Buttons/SadFaceButton" index="1"]
position = Vector2( 0.5, 1 )
shape = SubResource( 21 )

[node name="TopicSlot" parent="Buttons/SadFaceButton" index="2"]
visible = false

[node name="Label" parent="Buttons/SadFaceButton" index="3"]
visible = false

[node name="Goal" parent="." instance=ExtResource( 4 )]

[node name="Tweens" type="Node" parent="."]

[node name="TweenIn" type="Tween" parent="Tweens"]

[node name="TweenOut" type="Tween" parent="Tweens"]

[node name="Node" type="Node" parent="."]

[node name="Control" type="Control" parent="Node"]
anchor_right = 1.0

[node name="TimeLabel" type="Label" parent="Node/Control"]
anchor_left = 0.5
anchor_right = 0.5
margin_left = -40.5
margin_right = 40.5
margin_bottom = 69.0
grow_horizontal = 2
grow_vertical = 2
theme = ExtResource( 8 )
text = "30"
align = 1
valign = 1
autowrap = true

[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
[connection signal="tween_completed" from="Tweens/TweenIn" to="." method="_on_TweenIn_tween_completed"]
[connection signal="tween_completed" from="Tweens/TweenOut" to="." method="_on_TweenOut_tween_completed"]

[editable path="Buttons/TalkButton"]
[editable path="Buttons/FlirtButton"]
[editable path="Buttons/MentionButton"]
[editable path="Buttons/SmileyButton"]
[editable path="Buttons/SadFaceButton"]
